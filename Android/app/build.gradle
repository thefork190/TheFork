def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 34
    if (buildAsApplication) {
        namespace "org.libsdl.app"
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-16"
                abiFilters 'arm64-v8a'
            }
            cmake {
                arguments "-DANDROID_APP_PLATFORM=android-16", "-DANDROID_STL=c++_static"
                abiFilters 'arm64-v8a'
            }
        }
    }
    buildTypes {
        relWithDebInfo {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
                .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            // ndkBuild {
            //     path 'jni/Android.mk'
            // }
            cmake {
                path "../../CMakeLists.txt"
                version "3.22.1"
            }
        }

    }
    lintOptions {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    def flavorName = variant.flavorName
    def variantDir = flavorName ? "${flavorName}/${buildType}" : buildType

    // Dynamically register the task for copying assets for each variant
    tasks.register("copyAssets${variant.name.capitalize()}", Copy) {
        from("${rootProject.projectDir}/../Assets")
        into("${buildDir}/intermediates/assets/${variantDir}/Assets")

        // Force the task to always run, bypassing Gradle's up-to-date checks
        outputs.upToDateWhen { false }
    }

    // Ensure mergeAssets task depends on copyAssets task
    variant.mergeAssetsProvider.configure {
        dependsOn("copyAssets${variant.name.capitalize()}")
    }

    // Ensure preBuild depends on copyAssets to run before all other build tasks
    variant.preBuildProvider.configure {
        dependsOn("copyAssets${variant.name.capitalize()}")
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
